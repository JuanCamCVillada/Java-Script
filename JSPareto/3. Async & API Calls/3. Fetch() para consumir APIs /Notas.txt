FETCH la puerta de datos. ---------------------

- Nos permite obtner en tiempo real datos desde otros servidores
- Es la base para trabajar con APIS 
- funciona con promesas asi que de debe de trabajar con funciones asincronas. 

PETICION GET PARA OBTENER DATOS: -----------

GET: Solo para ver datos de un servidor 

fetch(""https://jsonplaceholder.typicode.com/todos/1"")
    .then(function(respuesta(){
        return respuesta.json();
    })
    .then(function(datos){
        console.log("tarea Recibida: ", datos)
    })
    .catch(funtion(error){
        console.log("ocurrio un error", error)
    })

    xplicaci√≥n paso a paso:
    1Ô∏è fetch(url) hace la petici√≥n a la API.
    2Ô∏è .then(respuesta => respuesta.json()) convierte la respuesta a JSON.
    3Ô∏è .then(datos => console.log(datos)) muestra los datos.
    4Ô∏è .catch(error => console.log(error)) maneja errores.

-----------------------------------------------

2. HACER UNA PETICION MAS MODERNA CON ASYNC Y AWAIT (MAS MODERNA Y CLARA)

async function obtenerTarea(){
    try{
        var respuesta = awayt fetch("https://jsonplaceholder.typicode.com/todos/1")
        var datos = await respuesta.json();
        console.log("Tarea Obtenida: " , datos )
    }catch(error){
        console.log("Ocurrio un eror: " , error)
    }
}

obtenerTarea();

-----------------------------------------------

HACER UNA PETICION POST: (ENVIAR DATOS)

async function crearTarea(){
    try{
        var respuesta = await fetch("https://jsonplaceholder.typicode.com/todos",{
            method: "POST", 
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                title: "aprender java",
                completed: false
            })
        })

        var datos = await respuesta.json();
        console.log("Tarea Completada" , datos)
    }catch(error){
        console.log("Eror al crear la tarea" , error )
    }
}

crearTarea();

-----

 Explicaci√≥n:

"method": "POST" ‚Üí Indicamos que estamos enviando datos.
"headers" ‚Üí Especificamos que los datos son JSON.
"body": JSON.stringify({...}) ‚Üí Convertimos el objeto en JSO

-----------------------------------------------

Ejercicio 1Ô∏è - Obtener Usuarios de una API


üìå Objetivo: Obtener la lista de usuarios desde https://jsonplaceholder.typicode.com/users y mostrar sus nombres en consola.

üìå Pasos:
1Ô∏è‚É£ Usa fetch() dentro de una funci√≥n async.
2Ô∏è‚É£ Convierte la respuesta en JSON.
3Ô∏è‚É£ Muestra los nombres de los usuarios en consola.
4Ô∏è‚É£ Maneja errores con try/catch.

-----------------------------------------------
Ejercicio 2Ô∏è - Crear un Nuevo Post


üìå Objetivo: Enviar un POST a https://jsonplaceholder.typicode.com/posts con un t√≠tulo y cuerpo de texto.

üìå Pasos:
1Ô∏è‚É£ Usa fetch() con el m√©todo POST.
2Ô∏è‚É£ Agrega un objeto con "title" y "body".
3Ô∏è‚É£ Convierte la respuesta a JSON y mu√©strala.
4Ô∏è‚É£ Maneja errores con try/catch.

